/*
 ****************************************************************************************
 * Copyright Â© Giovanni Novelli
 * All Rights Reserved.
 ****************************************************************************************
 *
 * Title:       JOSSER
 *
 * Description: JOSSER - A Java Tool capable to parse DMOZ RDF dumps and export them to
 *              any JDBC compliant relational database
 *
 * JosserGUI.java
 *
 * Created on 23 March 2009, 22.00 by Giovanni Novelli
 *
 ****************************************************************************************
 * JOSSER is available under the terms of the GNU General Public License Version 2.
 *
 * The author does NOT allow redistribution of modifications of JOSSER under the terms
 * of the GNU General Public License Version 3 or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 * For more details read file LICENSE
 *****************************************************************************************
 *
 * $Revision: 47 $
 * $Id: JosserGUI.java 47 2009-12-07 16:24:14Z gnovelli $
 * $HeadURL: https://josser.svn.sourceforge.net/svnroot/josser/branches/ui/project/src/net/sf/josser/JosserGUI.java $
 *
 *****************************************************************************************
 */

package net.sf.josser;

import java.awt.Cursor;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author Giovanni Novelli
 */
public class JosserGUI extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 6896111413344610713L;
	private Timer timer;
    private LongTask task;

    /** Creates new form JosserGUI */
    public JosserGUI() {
        // Get the native look and feel class name
        String nativeLF = UIManager.getSystemLookAndFeelClassName();

        // Install the look and feel
        try {
            UIManager.setLookAndFeel(nativeLF);
        } catch (InstantiationException e) {
            e.printStackTrace(System.err);
        } catch (ClassNotFoundException e) {
            e.printStackTrace(System.err);
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace(System.err);
        } catch (IllegalAccessException e) {
            e.printStackTrace(System.err);
        }
        initComponents();
        initConsole();
        task = new LongTask();
        int ONE_SECOND = 1000;
        timer = new Timer(ONE_SECOND, new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                jpbProgressBar.setValue(task.getCurrent());
                if (task.isDone()) {
                    Toolkit.getDefaultToolkit().beep();
                    timer.stop();
                    //jbExecute.setEnabled(true);
                    setCursor(null); //turn off the wait cursor
                    //jpbProgressBar.setValue(jpbProgressBar.getMinimum());
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jpMain = new javax.swing.JPanel();
        lConfiguration = new java.awt.Label();
        tfConfiguration = new java.awt.TextField();
        jbConfigurationChooser = new javax.swing.JButton();
        jbLoadConfiguration = new javax.swing.JButton();
        tfJDBCURI = new java.awt.TextField();
        jbCheck = new javax.swing.JButton();
        jcbCheck = new javax.swing.JCheckBox();
        jbExecute = new javax.swing.JButton();
        jpbProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jpConfiguration = new javax.swing.JPanel();
        lPath = new java.awt.Label();
        tfPath = new java.awt.TextField();
        lTop = new java.awt.Label();
        tfTop = new java.awt.TextField();
        lDriver = new java.awt.Label();
        tfDriver = new java.awt.TextField();
        lEngine = new java.awt.Label();
        tfEngine = new java.awt.TextField();
        lHost = new java.awt.Label();
        tfHost = new java.awt.TextField();
        lPort = new java.awt.Label();
        tfPort = new java.awt.TextField();
        lDatabase = new java.awt.Label();
        tfDatabase = new java.awt.TextField();
        lUsername = new java.awt.Label();
        tfUsername = new java.awt.TextField();
        lPassword = new java.awt.Label();
        tfPassword = new java.awt.TextField();
        lRChunk = new java.awt.Label();
        tfRChunk = new java.awt.TextField();
        tfWChunk = new java.awt.TextField();
        lWChunk = new java.awt.Label();
        jbDirChooser = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JOSSER");
        setResizable(false);

        jpMain.setPreferredSize(new java.awt.Dimension(920, 400));

        lConfiguration.setText("Configuration");

        tfConfiguration.setText("./josser.properties");

        jbConfigurationChooser.setText("...");
        jbConfigurationChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConfigurationChooserActionPerformed(evt);
            }
        });

        jbLoadConfiguration.setText("Load");
        jbLoadConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadConfigurationActionPerformed(evt);
            }
        });

        jbCheck.setText("Check");
        jbCheck.setEnabled(false);
        jbCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCheckActionPerformed(evt);
            }
        });

        jcbCheck.setEnabled(false);
        jcbCheck.setFocusable(false);

        jbExecute.setText("Execute");
        jbExecute.setEnabled(false);
        jbExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExecuteActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        console.setColumns(20);
        console.setFont(new java.awt.Font("Monospaced", 0, 10));
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout jpMainLayout = new javax.swing.GroupLayout(jpMain);
        jpMain.setLayout(jpMainLayout);
        jpMainLayout.setHorizontalGroup(
            jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMainLayout.createSequentialGroup()
                .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jbLoadConfiguration))
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMainLayout.createSequentialGroup()
                                .addComponent(jbCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbCheck))
                            .addComponent(jbExecute))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfConfiguration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addComponent(tfJDBCURI, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addComponent(jpbProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbConfigurationChooser))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );

        jpMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbCheck, jbExecute, jbLoadConfiguration});

        jpMainLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jpbProgressBar, tfConfiguration, tfJDBCURI});

        jpMainLayout.setVerticalGroup(
            jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addComponent(lConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbLoadConfiguration))
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbConfigurationChooser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfJDBCURI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpMainLayout.createSequentialGroup()
                                .addComponent(jbCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbExecute))
                            .addComponent(jcbCheck)))
                    .addGroup(jpMainLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jpbProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("Main", jpMain);

        lPath.setText("Path");

        tfPath.setText("../dmoz");

        lTop.setText("Top");

        tfTop.setText("Top/Computers");

        lDriver.setText("JDBC Driver");

        tfDriver.setText("com.mysql.jdbc.Driver");

        lEngine.setText("DB Engine");

        tfEngine.setText("mysql");

        lHost.setText("Host");

        tfHost.setText("localhost");

        lPort.setText("Port");

        tfPort.setText("3306");

        lDatabase.setText("Database");

        tfDatabase.setText("dmoz");

        lUsername.setText("Username");

        tfUsername.setText("root");

        lPassword.setText("Password");

        lRChunk.setText("Reading chunk");

        tfRChunk.setText("2000000");

        tfWChunk.setText("500000");

        lWChunk.setText("Writing chunk");

        jbDirChooser.setText("...");
        jbDirChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDirChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpConfigurationLayout = new javax.swing.GroupLayout(jpConfiguration);
        jpConfiguration.setLayout(jpConfigurationLayout);
        jpConfigurationLayout.setHorizontalGroup(
            jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfigurationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lEngine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lWChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfTop, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfEngine, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfHost, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfPort, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfRChunk, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfWChunk, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                    .addComponent(tfPath, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDirChooser))
        );
        jpConfigurationLayout.setVerticalGroup(
            jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfigurationLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbDirChooser)
                    .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lEngine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfEngine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lRChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfRChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lWChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfWChunk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Configuration", jpConfiguration);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );

        jTabbedPane.getAccessibleContext().setAccessibleName("Main");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbDirChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDirChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.addChoosableFileFilter(new RDFFilter());

        try {
            // Create a File object containing the canonical path of the
            // desired directory
            File f = new File(new File(".").getCanonicalPath());

            // Set the current directory
            chooser.setCurrentDirectory(f);
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }

        // The following method call sets the current directory to the home directory
        chooser.setCurrentDirectory(null);

        // Show the dialog; wait until dialog is closed
        chooser.showOpenDialog(this.getRootPane());

        // Get the current directory
        File cd = chooser.getCurrentDirectory();
        tfPath.setText(cd.getPath());
}//GEN-LAST:event_jbDirChooserActionPerformed

    private void jbLoadConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadConfigurationActionPerformed
        // TODO add your handling code here:
        Josser.initProperties(this.tfConfiguration.getText());
        tfPath.setText(Josser.getPath());
        tfTop.setText(Josser.getTopicfilter());
        tfDriver.setText(Josser.getDriver());
        tfEngine.setText(Josser.getEngine());
        tfHost.setText(Josser.getHost());
        tfPort.setText(String.valueOf(Josser.getPort()));
        tfDatabase.setText(Josser.getDB());
        tfUsername.setText(Josser.getUsername());
        tfPassword.setText(Josser.getPassword());
        tfRChunk.setText(String.valueOf(Josser.getRChunk()));
        tfWChunk.setText(String.valueOf(Josser.getWChunk()));

        tfJDBCURI.setText(Josser.getJDBC_URL());
        jbCheck.setEnabled(true);
        jcbCheck.setSelected(false);
        jbExecute.setEnabled(false);
    }//GEN-LAST:event_jbLoadConfigurationActionPerformed

    private void jbConfigurationChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConfigurationChooserActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.addChoosableFileFilter(new PropertiesFilter());

        try {
            // Create a File object containing the canonical path of the
            // desired directory
            File f = new File(new File(".").getCanonicalPath());

            // Set the current directory
            chooser.setCurrentDirectory(f);
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }

        // The following method call sets the current directory to the home directory
        chooser.setCurrentDirectory(null);

        // Show the dialog; wait until dialog is closed
        chooser.showOpenDialog(this.getRootPane());

        // Get the current directory
        File cd = chooser.getSelectedFile();
        try {
            tfConfiguration.setText(cd.getCanonicalPath());
        } catch (IOException e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_jbConfigurationChooserActionPerformed

    private void jbCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCheckActionPerformed
        // TODO add your handling code here:
        boolean test = Josser.checkConnection();
        jcbCheck.setSelected(test);
        if (test) {
            jbCheck.setEnabled(false);
            jbExecute.setEnabled(true);
        }
}//GEN-LAST:event_jbCheckActionPerformed

    private void jbExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExecuteActionPerformed
        // TODO add your handling code here:
        Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
        this.setCursor(hourglassCursor);
        jbExecute.setEnabled(false);
        task.go();
        timer.start();
    }//GEN-LAST:event_jbExecuteActionPerformed
    private ConsoleOutputStream outputStream = null;
    private PrintStream printStream = null;
    private OutputStream copy = null;

    private void initConsole() {
        this.installConsole();
    }

    public synchronized void updateConsole() {
        jScrollPane1.getVerticalScrollBar().setValue(
                jScrollPane1.getVerticalScrollBar().getMaximum());
        console.setCaretPosition( console.getDocument().getLength() );
    }

    public void setCopyOutputStream(OutputStream c) {
        setCopy(c);
    }

    public OutputStream getOutputStream() {
        if (outputStream == null) {
            outputStream = new ConsoleOutputStream(this, System.out);
        }
        return outputStream;
    }

    public PrintStream getPrintStream() {
        if (printStream == null) {
            printStream = new PrintStream(getOutputStream(), true);
        }
        return printStream;
    }

    public void installConsole() {
        System.setOut(getPrintStream());
        System.setErr(getPrintStream());
    }

    // WARNING - doesn't correctly translate bytes to chars.
    private class ConsoleOutputStream extends OutputStream {

        OutputStream orig;
        JosserGUI ui;

        public ConsoleOutputStream(JosserGUI ui, OutputStream o) {
            orig = o;
            this.ui = ui;
        }

        @Override
        public void write(int b) throws IOException {
            orig.write(b);
            if (getCopy() != null) {
                getCopy().write(b);
            }
            byte[] buf = new byte[1];
            buf[0] = (byte) b;
            console.append(new String(buf));
            ui.updateConsole();
        }

        @Override
        public void write(byte[] b, int off, int len) throws IOException {
            orig.write(b, off, len);
            if (getCopy() != null) {
                getCopy().write(b, off, len);
            }
            console.append(new String(b, off, len));
            ui.updateConsole();
        }
    }

    public void setOutputStream(ConsoleOutputStream outputStream) {
        this.outputStream = outputStream;
    }

    public void setPrintStream(PrintStream printStream) {
        this.printStream = printStream;
    }

    public OutputStream getCopy() {
        return copy;
    }

    public void setCopy(OutputStream copy) {
        this.copy = copy;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        boolean noui = true;
        if (args.length == 0) {
        } else {
            noui = false;
        }
        if (noui) {
            Josser.execute();
        } else {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new JosserGUI().setVisible(true);
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbCheck;
    private javax.swing.JButton jbConfigurationChooser;
    private javax.swing.JButton jbDirChooser;
    private javax.swing.JButton jbExecute;
    private javax.swing.JButton jbLoadConfiguration;
    private javax.swing.JCheckBox jcbCheck;
    private javax.swing.JPanel jpConfiguration;
    private javax.swing.JPanel jpMain;
    private javax.swing.JProgressBar jpbProgressBar;
    private java.awt.Label lConfiguration;
    private java.awt.Label lDatabase;
    private java.awt.Label lDriver;
    private java.awt.Label lEngine;
    private java.awt.Label lHost;
    private java.awt.Label lPassword;
    private java.awt.Label lPath;
    private java.awt.Label lPort;
    private java.awt.Label lRChunk;
    private java.awt.Label lTop;
    private java.awt.Label lUsername;
    private java.awt.Label lWChunk;
    private java.awt.TextField tfConfiguration;
    private java.awt.TextField tfDatabase;
    private java.awt.TextField tfDriver;
    private java.awt.TextField tfEngine;
    private java.awt.TextField tfHost;
    private java.awt.TextField tfJDBCURI;
    private java.awt.TextField tfPassword;
    private java.awt.TextField tfPath;
    private java.awt.TextField tfPort;
    private java.awt.TextField tfRChunk;
    private java.awt.TextField tfTop;
    private java.awt.TextField tfUsername;
    private java.awt.TextField tfWChunk;
    // End of variables declaration//GEN-END:variables

    class PropertiesFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".properties");
        }

        public String getDescription() {
            return "*.properties";
        }
    }

    class RDFFilter extends javax.swing.filechooser.FileFilter {

        public boolean accept(File file) {
            String filename = file.getName();
            return filename.endsWith(".rdf.u8");
        }

        public String getDescription() {
            return "*.rdf.u8";
        }
    }
}
